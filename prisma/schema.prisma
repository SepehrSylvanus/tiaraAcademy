// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

enum Role {
  teacher
  admin
  student
  adminTeacher
}

enum WritingStatus {
  checked
  pending
}

enum NotifStat {
  read
  unread
}

enum Type {
  private
  public
}

enum NotifType {
  register
  joinClass
}

model User {
  id                  String          @id @default(cuid()) @map("_id")
  fName               String
  lName               String?
  email               String          @unique
  additionalEmails    String[]
  password            String
  pNumber             String          @unique
  addintionalPNumbers String[]
  role                Role            @default(student)
  image               String?
  ClassUsers          ClassUsers[]
  Class               Class[]
  Writing             Writing[]
  PlaylistUsers       PlaylistUsers[]
  Blog                Blog[]
  Video               Video[]
}

model Class {
  id String @id @default(cuid()) @map("_id")

  ClassUsers    ClassUsers[]
  teacher       User         @relation(fields: [teacherId], references: [id])
  teacherId     String
  title         String
  type          String
  price         String?
  capacity      Int?
  days          String[]
  date          DateTime?
  duration      String[]
  times         String[]
  prerequisites String[]
  outline       String[]
  imageLink     String?
  imageName     String?
  createdAt     DateTime     @default(now())
}

model ClassUsers {
  id       String @id @default(cuid()) @map("_id")
  classId  String
  class    Class  @relation(fields: [classId], references: [id])
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  date     String
  time     String
  capacity Int
}

model PlaylistUsers {
  id            String   @id @default(cuid()) @map("_id")
  playlistTitle String
  playlist      Playlist @relation(fields: [playlistTitle], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id])
}

model Writing {
  id            String          @id @default(cuid()) @map("_id")
  creatorId     String
  creator       User            @relation(fields: [creatorId], references: [id])
  name          String?
  teacherId     String
  email         String?
  subject       String?
  subjectImgURL String?
  writing       String?
  status        WritingStatus   @default(pending)
  writingAnswer writingAnswer[]
  writingLink   String?
}

model writingAnswer {
  id          String   @id @default(cuid()) @map("_id")
  writingId   String   @unique
  writing     Writing  @relation(fields: [writingId], references: [id])
  writingSelf String
  createdAt   DateTime @default(now())
  band        String
}

model Video {
  id            String   @id @default(cuid()) @map("_id")
  title         String
  bucketKey     String?
  videoLink     String?
  playlistTitle String
  Playlist      Playlist @relation(fields: [playlistTitle], references: [title])
  caption       String
  creatorId     String
  creator       User     @relation(fields: [creatorId], references: [id])
  trend         Boolean  @default(false)
  createDate    DateTime @default(now())
}

model Blog {
  id         String   @id @default(cuid()) @map("_id")
  title      String
  image      String?
  author     User     @relation(fields: [authorId], references: [id])
  categories String
  text       String
  createdAt  DateTime @default(now())
  authorId   String
  bucketKey  String?
  trend      Boolean  @default(false)
}

model Otp {
  id      String @id @default(cuid()) @map("_id")
  pNumber String @unique
  otp     String @unique
}

model Playlist {
  id            String          @id @default(cuid()) @map("_id")
  title         String          @unique
  type          Type
  value         String
  price         String?
  PlaylistUsers PlaylistUsers[]
  description   String
  Video         Video[]
}

model Category {
  id    String @id @default(cuid()) @map("_id")
  title String @unique

  value String
}

model Notifs {
  id        String    @id @default(cuid()) @map("_id")
  title     String
  status    NotifStat @default(unread)
  type      NotifType
  createdAt DateTime  @default(now())
}
