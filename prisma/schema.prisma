// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

enum Role {
  teacher
  admin
  student
  adminTeacher
}

enum WritingStatus {
  checked
  pending
}

enum Type {
  private
  public
}

model User {
  id       String  @id @default(cuid()) @map("_id")
  fName    String
  lName    String?
  email    String  @unique
  password String
  pNumber  String  @unique
  role     Role    @default(student)

  ClassUsers    ClassUsers[]
  Class         Class[]
  Writing       Writing[]
  PlaylistUsers PlaylistUsers[]
}

model Class {
  id         String       @id @default(cuid()) @map("_id")
  createdAt  DateTime     @default(now())
  title      String
  days       String[]
  price      String
  type       Type
  capacity   Int
  times      String[]
  classUsers ClassUsers[]
  fix        Boolean      @default(false)
  creatorId  String
  creator    User         @relation(fields: [creatorId], references: [id])
  duration   String[]
}

model ClassUsers {
  id       String @id @default(cuid()) @map("_id")
  classId  String
  class    Class  @relation(fields: [classId], references: [id])
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  date     String
  time     String
  capacity Int
}

model PlaylistUsers {
  id            String   @id @default(cuid()) @map("_id")
  playlistTitle String
  playlist      Playlist @relation(fields: [playlistTitle], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id])
}

model Writing {
  id            String          @id @default(cuid()) @map("_id")
  creatorId     String
  creator       User            @relation(fields: [creatorId], references: [id])
  name          String?
  teacherId     String
  email         String?
  subject       String?
  subjectImgURL String?
  writing       String?
  status        WritingStatus   @default(pending)
  writingAnswer writingAnswer[]
  writingLink   String?
}

model writingAnswer {
  id          String   @id @default(cuid()) @map("_id")
  writingId   String   @unique
  writing     Writing  @relation(fields: [writingId], references: [id])
  writingSelf String
  createdAt   DateTime @default(now())
  band        String
}

model Video {
  id        String   @id @default(cuid()) @map("_id")
  title     String
  bucketKey String?
  videoLink String?
  playlist  String[]
  caption   String
  trend     Boolean  @default(false)
}

model Blog {
  id        String   @id @default(cuid()) @map("_id")
  image     String
  author    String
  text      String
  createdAt DateTime @default(now())
}

model Otp {
  id      String @id @default(cuid()) @map("_id")
  pNumber String @unique
  otp     String @unique
}

model Playlist {
  id            String          @id @default(cuid()) @map("_id")
  title         String          @unique
  type          Type
  value         String
  price         String?
  PlaylistUsers PlaylistUsers[]
}

model Category {
  id    String @id @default(cuid()) @map("_id")
  title String @unique

  value String
}
